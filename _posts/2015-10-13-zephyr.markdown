---
title: zephyr
layout: default
---

[<< back to index <<]({{ site.baseurl }}{% post_url 2015-08-23-index %})

This consists of everything I wish I knew about Zephyr. I use BarnOwl because everybody else does and because it's cool. SIPB already has useful documentation, of course:

- [SIPB on zephyr and culture](https://sipb.mit.edu/doc/zephyr/), including slang ("mix", "i,i", "stark") and common classes/instances/instance components (unclasses, ".d" classes/instances, ".q", "else"/"eiz"/"eip"/"eim"/"eiw"...)
- [SIPB on `zcrypt`](https://sipb.mit.edu/doc/zcrypt/)
- [SIPB on `screen`](https://sipb.mit.edu/doc/screen/)

## Startup

Possibly, `athrun kchen owl-screen`. I prefer `tmux` but I'm not confident how reliable my hacked-together script for doing this is.

## More Colors

BarnOwl does support 256 colors, but it tries to detect if your terminal supports 256 colors upon startup.

If you're using `tmux` like me, adding this line to your `.tmux.conf` probably does the trick:

    set -g default-terminal "screen-256color"

If you do this correctly and run `:show colors` from inside BarnOwl, you should get a list of the eight basic colors and 8 to 255.

[benkraft's `.screenrc`](https://github.com/benjaminjkraft/dotfiles/blob/master/.screenrc) (also linked below) suggests this line for `screen` users:

    term screen-256color-bce

## Getting Help

There's `:help`, of course, but it's pretty messy. You can `:help foo` where `foo` is a command to find it.

Also useful index-like things: `:show commands`, `:show variables`, `:show keymaps`.

## Useful Commands

### Sending Zephyrs

- `:zwrite`, but you usually won't type it out; you'll type `z` to start a command line, or one of the reply keys like `r` or `R` or `C-R` (Ctrl+R).

### Reading Zephyrs

- `:subscribe` or `:sub` for short lets you subscribe to a help. You don't have to type any stars or whatever. `:sub <3` is enough to subscribe to class `<3`.
- `:getsubs` lists what you're subbed to.
- `:view` (autofilled with key `v`):

  - `:view filtername` with a `filtername` you've already defined with a `filter` command to focus on only messages matching that filter.
  - `:view -d` lets you put together a filter together on the fly, e.g. `:view -d class help and instance barnowl`.
- `:vp person` narrows to private zephyrs between you and person.
- `:search` and `:search -r` (autofilled with keys `/` and `?`) let you search for strings. Without any arguments, they repeat the search in the same direction. (Note that unlike Vim, `:search` is always forward and `:search -r` is always backward; they're not influenced by the initial direction of the search.) Because this is still hard to type, I have these mapped to `[` and `]`.

  To stop the search highlighting (as `:nohl` in Vim), call `:setsearch` without any arguments.

- By the way, if you see an asterisk next to a message, that's the "mark". C-space moves the mark to the current message, while C-x C-x swaps your location and the mark. I'm not sure how useful this is for navigation; it's mostly in case you accidentally see an asterisk and wonder what it's there for.

### Plugins

BarnOwl's plugin language is Perl. Sam Hughes' [Learn Perl in about 2 hours 30 minutes](http://qntm.org/files/perl/perl.html) is my favorite Perl tutorial, although I call built-in functions with no arguments to make them implicitly operate on `$_` a lot more often than is healthy.

As best I can figure out, the simplest way to create a plugin is to put something in, for example, `~/.owl/modules/FooBar/lib/BarnOwl/Module/FooBar.pm`. (Shell aside: you can `mkdir -p chain/of/directories` to make all of them at once.) Here's a reasonably minimal example, although I confess I'm not sure what the documentation bits really do.

    use warnings;
    use strict;

    =head1 NAME

    BarnOwl::Module::FooBar

    =head1 DESCRIPTION

    This is package FooBar. Describe it or whatever. I don't know.

    =cut

    package BarnOwl::Module::FooBar;

    our $VERSION = 0.1.0.2;

    sub cmd_foobar {
        my $cmd = shift;
        my $txt = "This was called with command $cmd.\n";
        for my $i (0..$#_) {
            $txt .= "Argument $i was $_[$i].\n"
        }
        BarnOwl::popless_text($txt);
    }
    BarnOwl::new_command('foobar' => \&cmd_foobar, {
            summary => "Does foobar",
            description => "Does foobar.\n" .
            "This is a long description.\n" .
            "You can see it if you `help foobar`.",
            usage => "foobar [arg0 [arg1 [...]]]"
        });

    1;

### Styles

These things control how the messages are shown and laid out on your screen. Stuff like what characters are shown between the class, instance, and sender. If you want to **make a style**, the simplest way is probably to copy the code from `BarnOwl::Style::Default` into a module and change the package paths. If you want to **activate a style**, the BarnOwl command is `:view -s stylename`. This doesn't make any sense, I think, but I don't know.

### Customization

I think this is best done by example. Here's most of the generally applicable stuff in my `~/.owl/startup`:

    set debug
    set logging
    set classlogging
    set zsigfunc BarnOwl::random_zephyr_signature()
    set rxping

    zpunt bigben welcome

    filter bpchen -c red class ^(un)*bpchen$

    bindkey recv j command recv:next-notdel
    bindkey recv k command recv:prev-notdel
    bindkey recv J command recv:pagedown
    bindkey recv K command recv:pageup
    bindkey recv f command smartnarrow
    bindkey recv F command smartnarrow -i
    bindkey recv Z command start-command zwrite -c bpchen -i 
    bindkey recv s command source ~/.owl/startup
    bindkey recv g command recv:first
    bindkey recv G command recv:last
    bindkey recv @ command show keymaps
    bindkey recv ] command search
    bindkey recv [ command search -r
    bindkey popless j command popless:scroll-down-line
    bindkey popless k command popless:scroll-up-line
    bindkey popless J command popless:scroll-down-page
    bindkey popless K command popless:scroll-up-page
    bindkey popless g command popless:scroll-to-top
    bindkey popless G command popless:scroll-to-bottom

    timeformat '%y %m-%d %H:%M:%S'

    alias to zwrite -c bpchen -i →
    alias at zwrite -c bpchen -i ⌖
    alias set-style view -s
    alias nohl setsearch
    alias h help
    alias q zwrite bpchen "Don't do this!"

The filter example might be the most useful:

    filter bpchen -c red class ^(un)*bpchen$

This creates a filter named `bpchen` that will make the text of the messages it matches red. It also says that it matches all messages whose class names match the regex `^(un)*bpchen$`. Note that, although the filter name and the class name are often related or similar, they don't have to be. If you type `:view bpchen`, it narrows to this filter.

They are applied at startup, or running `:source ~/.owl/startup` from inside a live BarnOwl session (if you want to keep it running in screen, say) should execute settings from the file. These settings are probably idempotent so it probably wouldn't hurt.

These mappings overwrite a couple of the built-in keymaps for interfacing with Facebook and Jabber and stuff, because I just don't use them.

I do not know how to unalias things. I do not know if it's possible.

## Settings

Well, they're called "variables". The command is `:set variable-name value`.

Boolean variables take values `on` and `off`. Don't ask me why. Admittedly, you can just `set variable-name` and `unset variable-name` in that case. (`on` and `off` are also the values you'd get from querying the settings in perl. I'm terribly sorry.)

To see the value and default value of a variable, run `:show variable variable-name`. I do not think there is a way to reset the default value of a variable without explicitly typing or pasting the default value yourself.

The most common nontrivial zsig setup is to pull a random line from a file, `~/.zsigs`. BarnOwl lets you do this mostly out of the box: set `zsigfunc` to `BarnOwl::random_zephyr_signature()`.

If you'd rather just have a static zsig, you can just `set zsig 'your signature'`.

There is also a more general zephyr (not BarnOwl-specific!) setting, `zwrite-signature`, that BarnOwl will fall back on. To set it, run **from the command line**

    $ zctl set zwrite-signature 'your signature'

This will also change your zsig when you `zwrite` from the command line (`zwrite` in BarnOwl and `zwrite` on the command-line take pretty much the same options).

Setting the variable `rxping` shows you pings, which are things that people usually send when they initiate a private message to you. (To not send pings yourself, set `txping` off.) This is either fun or creepy.

## `screen` and `tmux`

[Hyperpolyglot deals with this](http://hyperpolyglot.org/multiplexers) but I don't think that it's actually very good right now. Here's a concise version:

| Operation          | `screen`      | `tmux`         |
| attach             | `screen -dr`  | `tmux attach`  |
| default prefix key | C-a           | C-b            |
| detach             | d             | d              |
| new window         | c             | c              |
| close window       | k             | &              |
| close region/pane  | X             | x              |
| split top-bottom   | S             | "              |
| split left-right   |               | %              |
| last activated     | C-a           |                |
| list-windows       | C-w           |                |
| go to window 7     | 7             | 7              |
| startup file name  | `~/.screenrc` | `~/.tmux.conf` |

benkraft says you can steal [his `.screenrc`](https://github.com/benjaminjkraft/dotfiles/blob/master/.screenrc). As for `~/.tmux.conf`, here's a basic version of mine.

    bind-key a last-window
    unbind-key %
    bind-key | split-window -h
    bind-key s split-window -h
    unbind-key '"'
    bind-key - split-window -v
    bind-key v split-window -v

    bind-key h select-pane -L
    bind-key j select-pane -D
    bind-key k select-pane -U
    bind-key l select-pane -R
    bind-key C-h resize-pane -L 4
    bind-key C-j resize-pane -D 4
    bind-key C-k resize-pane -U 4
    bind-key C-l resize-pane -R 4

    set -g default-terminal "screen-256color"

## Other Stuff

Sometimes your shell gets wonky, like every character you type is substituted with some unicode or newlines don't exist or anything. The shell command `reset` might fix this.
